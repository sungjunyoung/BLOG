<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on sungjunyoung</title><link>https://sungjunyoung.github.io/posts/</link><description>Recent content in Posts on sungjunyoung</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 17 May 2021 00:45:48 +0900</lastBuildDate><atom:link href="https://sungjunyoung.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Goroutine 은 어떻게 동작할까?</title><link>https://sungjunyoung.github.io/posts/how-goroutine-works/</link><pubDate>Mon, 17 May 2021 00:45:48 +0900</pubDate><guid>https://sungjunyoung.github.io/posts/how-goroutine-works/</guid><description>
본 포스트는 GopherCon 2018 Kavya Joshi 의 The Scheduler Saga 발표를 재구성하여 작성하였습니다.
Intro Golang 의 장점으로 빠짐없이 언급되는 것이 바로 강력한 동시성 지원입니다. 이 강력한 동시성에서 빠질 수 없는 요소가 바로 goroutine 입니다. 개발자는 go 키워드를 통해 goroutine 을 생성함으로서 손쉽게 동시성을 지원하는 프로그램을 개발할 수 있습니다. Channel 을 사용하면 goroutine 간에 데이터를 손쉽게 전달할 수 도 있죠.
package main import ( &amp;#34;fmt&amp;#34; &amp;#34;time&amp;#34; ) func main() { go f() fmt.</description></item></channel></rss>